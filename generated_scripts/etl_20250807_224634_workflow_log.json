{
  "file_info": {
    "s3_url": "s3://pkn-aws-genai/d30bf953-54be-414b-9ec7-f9e9944aa687.csv",
    "original_filename": "sample_sales_data.csv",
    "content_type": "application/octet-stream"
  },
  "user_requirements": "execute work flow",
  "generated_script": "import boto3\nimport pandas as pd\nimport logging\nfrom snowflake.connector.pandas_tools import connect\nfrom snowflake.connector import SnowflakeConnection\nfrom snowflake.connector.errors import OperationalError, ProgrammingError\n\n# Configuration dictionaries\n\n# ===============================================================================\n# CONFIGURATION INJECTION (Auto-generated by LangGraph workflow)\n# ===============================================================================\nimport os\n\n# Snowflake configuration (using actual environment variables)\nSNOWFLAKE_CONFIG = {\n    'account': os.getenv('SNOWFLAKE_ACCOUNT', 'WRCQQUY-IE42818'),\n    'user': os.getenv('SNOWFLAKE_USER', 'PKN78'),\n    'password': os.getenv('SNOWFLAKE_PASSWORD', 'your_password'),\n    'warehouse': os.getenv('SNOWFLAKE_WAREHOUSE', 'COMPUTE_WH'),\n    'database': os.getenv('SNOWFLAKE_DATABASE', 'dev_db'),\n    'schema': os.getenv('SNOWFLAKE_SCHEMA', 'app_dm'),\n}\n\n# AWS configuration (using actual environment variables)\nAWS_CONFIG = {\n    'aws_access_key_id': os.getenv('AWS_ACCESS_KEY_ID'),\n    'aws_secret_access_key': os.getenv('AWS_SECRET_ACCESS_KEY'),\n    'region_name': os.getenv('AWS_REGION', 'us-east-1'),\n}\n\n# Validate configuration\ndef validate_snowflake_config():\n    missing = [k for k, v in SNOWFLAKE_CONFIG.items() if not v or v.startswith('your_')]\n    aws_missing = [k for k, v in AWS_CONFIG.items() if not v]\n    \n    if missing:\n        print(f\"\u26a0\ufe0f  Missing Snowflake configuration: {', '.join(missing)}\")\n    if aws_missing:\n        print(f\"\u26a0\ufe0f  Missing AWS configuration: {', '.join(aws_missing)}\")\n        \n    if missing or aws_missing:\n        print(\"Please set environment variables or update config.py\")\n        return False\n    return True\n\n# Check configuration on import\nCONFIG_VALID = validate_snowflake_config()\n\n# Print configuration status\nif CONFIG_VALID:\n    print(\"\u2705 Configuration validated successfully\")\nelse:\n    print(\"\u274c Configuration validation failed - some operations may not work\")\n\n# ===============================================================================\n# END OF CONFIGURATION INJECTION\n# ===============================================================================\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass ETLProcess:\n    def __init__(self, aws_config, snowflake_config):\n        self.s3_client = boto3.client('s3', **aws_config)\n        self.snowflake_conn = connect(**snowflake_config)\n        self.snowflake_cur = self.snowflake_conn.cursor()\n\n        if not CONFIG_VALID:\n            logger.error(\"Configuration is invalid or incomplete.\")\n            raise ValueError(\"Configuration is invalid or incomplete.\")\n\n    def download_file(self, bucket, key):\n        try:\n            s3_response = self.s3_client.get_object(Bucket=bucket, Key=key)\n            data = s3_response['Body'].read().decode('utf-8')\n            return data\n        except Exception as e:\n            logger.error(f\"Error downloading file from S3: {e}\")\n            raise\n\n    def parse_csv(self, csv_data):\n        try:\n            df = pd.read_csv(pd.compat.StringIO(csv_data))\n            return df\n        except Exception as e:\n            logger.error(f\"Error parsing CSV data: {e}\")\n            raise\n\n    def validate_data_quality(self, df):\n        if df.empty:\n            logger.error(\"Dataframe is empty.\")\n            raise ValueError(\"Dataframe is empty.\")\n        if not all(col in df.columns for col in ['id', 'product_name', 'category', 'price', 'quantity', 'sale_date', 'customer_id', 'region']):\n            logger.error(\"Missing columns in dataframe.\")\n            raise ValueError(\"Missing columns in dataframe.\")\n        if not df['id'].is_unique:\n            logger.error(\"Duplicate id values found.\")\n            raise ValueError(\"Duplicate id values found.\")\n\n    def transform_data(self, df):\n        df['sale_date'] = pd.to_datetime(df['sale_date'], errors='coerce')\n        return df\n\n    def load_to_snowflake(self, df):\n        try:\n            columns = ['id', 'product_name', 'category', 'price', 'quantity', 'sale_date', 'customer_id', 'region']\n            for col in columns:\n                df[col].fillna('', inplace=True)\n            df.to_sql(\n                name='sales_data',\n                con=self.snowflake_conn,\n                if_exists='replace',\n                index=False,\n                method='multi'\n            )\n        except (OperationalError, ProgrammingError) as e:\n            logger.error(f\"Error loading data to Snowflake: {e}\")\n            raise\n\n    def execute(self):\n        bucket = 'pkn-aws-genai'\n        key = 'd30bf953-54be-414b-9ec7-f9e9944aa687.csv'\n        \n        try:\n            csv_data = self.download_file(bucket, key)\n            df = self.parse_csv(csv_data)\n            self.validate_data_quality(df)\n            df = self.transform_data(df)\n            self.load_to_snowflake(df)\n            logger.info(\"ETL process completed successfully.\")\n        except Exception as e:\n            logger.error(f\"ETL process failed: {e}\")\n            raise\n\nif __name__ == \"__main__\":\n    etl = ETLProcess(AWS_CONFIG, SNOWFLAKE_CONFIG)\n    etl.execute()",
  "script_path": "generated_scripts/etl_20250807_224634_etl_script.py",
  "execution_output": "\nTraceback (most recent call last):\n  File \"/Users/ace/working/LLM_ETL_UI/generated_scripts/etl_20250807_224634_etl_script.py\", line 4, in <module>\n    from snowflake.connector.pandas_tools import connect\nImportError: cannot import name 'connect' from 'snowflake.connector.pandas_tools' (/Users/ace/working/LLM_ETL_GEN_UI/.venv/lib/python3.13/site-packages/snowflake/connector/pandas_tools.py). Did you mean: 'connector'?\n",
  "execution_success": false,
  "execution_error": "Script execution failed with return code 1",
  "snowflake_table_created": false,
  "snowflake_records_inserted": 0,
  "workflow_id": "etl_20250807_224634",
  "timestamp": "2025-08-07T22:46:34.587514",
  "status": "execution_failed"
}